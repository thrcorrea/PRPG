package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"sort"
	"strings"
	"time"

	"github.com/google/go-github/v55/github"
	"github.com/joho/godotenv"
	"github.com/spf13/cobra"
	"github.com/thrcorrea/PRPG/internal/infrastructure"
)

// Repository representa um reposit√≥rio para an√°lise
type Repository struct {
	Owner string
	Name  string
}

// UserStats representa as estat√≠sticas de um usu√°rio
type UserStats struct {
	Username                   string
	PRsCount                   int
	WeeklyWins                 int
	TotalScore                 int
	RepoStats                  map[string]int // PRs por reposit√≥rio
	CommentsCount              int            // Total de coment√°rios feitos pelo usu√°rio
	CommentWeeklyWins          int            // Vit√≥rias semanais por coment√°rios
	CommentScore               int            // Pontua√ß√£o total por coment√°rios
	WeightedCommentScore       float64        // Pontua√ß√£o ponderada por rea√ß√µes (üëç=+2, üëé=-1)
	WeightedCommentWeeklyWins  int            // Vit√≥rias semanais por qualidade de coment√°rios
	WeightedCommentWeeklyScore int            // Pontua√ß√£o semanal por qualidade de coment√°rios
}

// WeeklyData representa os dados de uma semana espec√≠fica
type WeeklyData struct {
	StartDate             time.Time
	EndDate               time.Time
	UserPRs               map[string]int
	Winner                string
	RepoData              map[string]map[string]int // repo -> user -> PRs
	UserComments          map[string]int            // coment√°rios por usu√°rio na semana
	CommentWinner         string                    // vencedor da semana por coment√°rios
	UserWeightedComments  map[string]float64        // pontua√ß√£o ponderada por usu√°rio na semana
	WeightedCommentWinner string                    // vencedor da semana por pontua√ß√£o ponderada
}

// PRChampion √© a estrutura principal da aplica√ß√£o
type PRChampion struct {
	client       infrastructure.GithubAdapter
	cachedClient infrastructure.CacheableGithubAdapter // Para opera√ß√µes de cache
	repositories []Repository
	startDate    time.Time
	endDate      time.Time
	weeklyData   []WeeklyData
	userStats    map[string]*UserStats
}

// NewPRChampion cria uma nova inst√¢ncia do PR Champion
func NewPRChampion(token string, repositories []Repository, startDate, endDate time.Time) (*PRChampion, error) {
	// Cria cliente com cache em banco de dados
	cachedClient, err := infrastructure.NewCachedGithubAdapter(token, "./data/comments.db")
	if err != nil {
		return nil, fmt.Errorf("erro ao criar cliente com cache: %v", err)
	}

	return &PRChampion{
		client:       cachedClient,
		cachedClient: cachedClient,
		repositories: repositories,
		startDate:    startDate,
		endDate:      endDate,
		weeklyData:   []WeeklyData{},
		userStats:    make(map[string]*UserStats),
	}, nil
}

// ClearCache limpa todo o cache do banco de dados
func (pc *PRChampion) ClearCache() error {
	if pc.cachedClient == nil {
		return fmt.Errorf("cliente com cache n√£o est√° dispon√≠vel")
	}
	return pc.cachedClient.ClearCache()
}

// FetchMergedPRs busca todos os PRs mergeados no per√≠odo especificado para todos os reposit√≥rios
func (pc *PRChampion) FetchMergedPRs() error {
	fmt.Printf("üîç Buscando PRs mergeados de %s para %d reposit√≥rios...\n",
		pc.startDate.Format("2006-01-02"), len(pc.repositories))

	var allPRs []*github.PullRequest

	for _, repo := range pc.repositories {
		fmt.Printf("  üìÅ Analisando %s/%s...\n", repo.Owner, repo.Name)

		repoPRs, err := pc.client.FetchPRsForRepo(repo.Owner, repo.Name, pc.startDate, pc.endDate)
		if err != nil {
			fmt.Printf("  ‚ö†Ô∏è  Erro ao buscar PRs do repo %s/%s: %v\n", repo.Owner, repo.Name, err)
			continue // Continua com os outros reposit√≥rios
		}

		allPRs = append(allPRs, repoPRs...)
	}

	fmt.Printf("üìä Encontrados %d PRs mergeados no per√≠odo total\n", len(allPRs))

	pc.processWeeklyData(allPRs)

	// Busca coment√°rios para todos os PRs
	if err := pc.fetchCommentsForPRs(allPRs); err != nil {
		fmt.Printf("‚ö†Ô∏è  Erro ao buscar coment√°rios: %v\n", err)
	}
	pc.calculateUserStats()

	return nil
}

// fetchCommentsForPRs busca coment√°rios de todos os PRs
func (pc *PRChampion) fetchCommentsForPRs(prs []*github.PullRequest) error {
	fmt.Printf("üí¨ Buscando coment√°rios dos PRs...\n")

	ctx := context.Background()
	totalComments := 0

	// Mapas para rastrear coment√°rios por semana
	weeklyComments := make(map[string]map[string]int)             // weekKey -> username -> count
	weeklyWeightedComments := make(map[string]map[string]float64) // weekKey -> username -> weighted score
	weekStarts := make(map[string]time.Time)

	for _, pr := range prs {
		repoOwner := pr.Base.Repo.Owner.GetLogin()
		repoName := pr.Base.Repo.GetName()
		prNumber := pr.GetNumber()
		comments, err := pc.client.ListPRComments(ctx, repoOwner, repoName, prNumber)
		if err != nil {
			fmt.Printf("  ‚ö†Ô∏è  Erro ao buscar coment√°rios do PR #%d em %s/%s: %v\n", prNumber, repoOwner, repoName, err)
			break
		}

		for _, comment := range comments {
			commentTime := comment.CreatedAt.Time
			// Verifica se o coment√°rio foi feito no per√≠odo analisado
			if commentTime.After(pc.startDate) && commentTime.Before(pc.endDate.Add(24*time.Hour)) {
				username := comment.User.GetLogin()

				// Filtra usu√°rios exclu√≠dos (bots, sonarqube, etc.)
				if isExcludedUser(username) {
					continue
				}

				if username == pr.User.GetLogin() {
					fmt.Println("    ‚ùó Coment√°rio do autor do PR ignorado:", username)
					continue // Pula coment√°rios feitos pelo autor do PR
				}

				// Determina a semana do coment√°rio
				weekStart := getWeekStart(commentTime)
				weekKey := weekStart.Format("2006-01-02")

				if weeklyComments[weekKey] == nil {
					weeklyComments[weekKey] = make(map[string]int)
					weeklyWeightedComments[weekKey] = make(map[string]float64)
					weekStarts[weekKey] = weekStart
				}

				// Calcula pontua√ß√£o ponderada baseada nas rea√ß√µes
				commentScore := pc.calculateCommentScore(ctx, repoOwner, repoName, comment.GetID())

				weeklyComments[weekKey][username]++
				weeklyWeightedComments[weekKey][username] += commentScore
				totalComments++
			}
		}

		reviewComments, err := pc.client.ListPRReviewComments(ctx, repoOwner, repoName, prNumber)
		if err != nil {
			fmt.Printf("  ‚ö†Ô∏è  Erro ao buscar review comments do PR #%d em %s/%s: %v\n", prNumber, repoOwner, repoName, err)
			break
		}

		for _, comment := range reviewComments {
			commentTime := comment.CreatedAt.Time
			// Verifica se o coment√°rio foi feito no per√≠odo analisado
			if commentTime.After(pc.startDate) && commentTime.Before(pc.endDate.Add(24*time.Hour)) {
				username := comment.User.GetLogin()

				// Filtra usu√°rios exclu√≠dos (bots, sonarqube, etc.)
				if isExcludedUser(username) {
					continue
				}

				// Determina a semana do coment√°rio
				weekStart := getWeekStart(commentTime)
				weekKey := weekStart.Format("2006-01-02")

				if weeklyComments[weekKey] == nil {
					weeklyComments[weekKey] = make(map[string]int)
					weeklyWeightedComments[weekKey] = make(map[string]float64)
					weekStarts[weekKey] = weekStart
				}

				// Calcula pontua√ß√£o ponderada baseada nas rea√ß√µes
				commentScore := pc.calculateReviewCommentScore(ctx, repoOwner, repoName, comment.GetID())

				weeklyComments[weekKey][username]++
				weeklyWeightedComments[weekKey][username] += commentScore
				totalComments++
			}
		}

	}

	// Adiciona dados de coment√°rios √†s semanas existentes
	pc.processWeeklyComments(weeklyComments, weeklyWeightedComments, weekStarts)

	fmt.Printf("üí¨ Total de coment√°rios encontrados no per√≠odo: %d\n", totalComments)
	return nil
}

// processWeeklyComments processa os coment√°rios por semana e identifica vencedores
func (pc *PRChampion) processWeeklyComments(weeklyComments map[string]map[string]int, weeklyWeightedComments map[string]map[string]float64, weekStarts map[string]time.Time) {
	// Adiciona dados de coment√°rios √†s semanas existentes ou cria novas semanas
	for weekKey, userComments := range weeklyComments {
		weekStart := weekStarts[weekKey]

		// Encontra o vencedor da semana por coment√°rios (contagem simples)
		var commentWinner string
		maxComments := 0
		for user, count := range userComments {
			if count > maxComments {
				maxComments = count
				commentWinner = user
			}
		}

		// Encontra o vencedor da semana por pontua√ß√£o ponderada
		var weightedCommentWinner string
		maxWeightedScore := 0.0
		userWeightedComments := weeklyWeightedComments[weekKey]
		for user, score := range userWeightedComments {
			if score > maxWeightedScore {
				maxWeightedScore = score
				weightedCommentWinner = user
			}
		}

		// Procura se j√° existe uma semana correspondente
		found := false
		for i := range pc.weeklyData {
			if pc.weeklyData[i].StartDate.Equal(weekStart) {
				pc.weeklyData[i].UserComments = userComments
				pc.weeklyData[i].CommentWinner = commentWinner
				pc.weeklyData[i].UserWeightedComments = userWeightedComments
				pc.weeklyData[i].WeightedCommentWinner = weightedCommentWinner
				found = true
				break
			}
		}

		// Se n√£o encontrou, cria uma nova entrada semanal apenas para coment√°rios
		if !found {
			weekEnd := weekStart.Add(6 * 24 * time.Hour)
			pc.weeklyData = append(pc.weeklyData, WeeklyData{
				StartDate:             weekStart,
				EndDate:               weekEnd,
				UserPRs:               make(map[string]int),
				UserComments:          userComments,
				CommentWinner:         commentWinner,
				UserWeightedComments:  userWeightedComments,
				WeightedCommentWinner: weightedCommentWinner,
			})
		}
	}

	// Reordena por data
	sort.Slice(pc.weeklyData, func(i, j int) bool {
		return pc.weeklyData[i].StartDate.Before(pc.weeklyData[j].StartDate)
	})
}

// processWeeklyData processa os PRs por semana
func (pc *PRChampion) processWeeklyData(prs []*github.PullRequest) {
	// Agrupa PRs por semana
	weeklyMap := make(map[string]map[string]int)
	weekStarts := make(map[string]time.Time)

	for _, pr := range prs {
		mergedAt := pr.MergedAt.Time
		weekStart := getWeekStart(mergedAt)
		weekKey := weekStart.Format("2006-01-02")

		if weeklyMap[weekKey] == nil {
			weeklyMap[weekKey] = make(map[string]int)
			weekStarts[weekKey] = weekStart
		}

		username := pr.User.GetLogin()
		weeklyMap[weekKey][username]++
	}

	// Converte para slice de WeeklyData
	for weekKey, userPRs := range weeklyMap {
		weekStart := weekStarts[weekKey]
		weekEnd := weekStart.Add(6 * 24 * time.Hour)

		// Encontra o vencedor da semana
		var winner string
		maxPRs := 0
		for user, count := range userPRs {
			if count > maxPRs {
				maxPRs = count
				winner = user
			}
		}

		pc.weeklyData = append(pc.weeklyData, WeeklyData{
			StartDate: weekStart,
			EndDate:   weekEnd,
			UserPRs:   userPRs,
			Winner:    winner,
		})
	}

	// Ordena por data
	sort.Slice(pc.weeklyData, func(i, j int) bool {
		return pc.weeklyData[i].StartDate.Before(pc.weeklyData[j].StartDate)
	})
}

// calculateUserStats calcula as estat√≠sticas finais dos usu√°rios
func (pc *PRChampion) calculateUserStats() {
	for _, week := range pc.weeklyData {
		// Processa PRs
		for username, prCount := range week.UserPRs {
			if pc.userStats[username] == nil {
				pc.userStats[username] = &UserStats{
					Username:  username,
					RepoStats: make(map[string]int),
				}
			}

			stats := pc.userStats[username]
			stats.PRsCount += prCount

			if username == week.Winner {
				stats.WeeklyWins++
				stats.TotalScore++
			}
		}

		// Processa coment√°rios
		for username, commentCount := range week.UserComments {
			if pc.userStats[username] == nil {
				pc.userStats[username] = &UserStats{
					Username:  username,
					RepoStats: make(map[string]int),
				}
			}

			stats := pc.userStats[username]
			stats.CommentsCount += commentCount

			if username == week.CommentWinner {
				stats.CommentWeeklyWins++
				stats.CommentScore++
			}
		}

		// Processa pontua√ß√£o ponderada de coment√°rios
		for username, weightedScore := range week.UserWeightedComments {
			if pc.userStats[username] == nil {
				pc.userStats[username] = &UserStats{
					Username:  username,
					RepoStats: make(map[string]int),
				}
			}

			stats := pc.userStats[username]
			stats.WeightedCommentScore += weightedScore

			// Se for o vencedor da semana por qualidade de coment√°rios, ganha 1 ponto
			if username == week.WeightedCommentWinner {
				stats.WeightedCommentWeeklyWins++
				stats.WeightedCommentWeeklyScore++
			}
		}
	}
}

// GenerateReport gera o relat√≥rio final
func (pc *PRChampion) GenerateReport() {
	fmt.Printf("\nüèÜ RELAT√ìRIO PR CHAMPION - %s a %s\n",
		pc.startDate.Format("02/01/2006"), pc.endDate.Format("02/01/2006"))

	// Lista dos reposit√≥rios analisados
	fmt.Printf("üìÅ Reposit√≥rios analisados (%d):\n", len(pc.repositories))
	for _, repo := range pc.repositories {
		fmt.Printf("   ‚Ä¢ %s/%s\n", repo.Owner, repo.Name)
	}
	fmt.Println()

	// Relat√≥rio semanal
	fmt.Println("üìÖ RESUMO SEMANAL:")
	fmt.Println(strings.Repeat("=", 60))

	for _, week := range pc.weeklyData {
		fmt.Printf("Semana: %s - %s\n",
			week.StartDate.Format("02/01"), week.EndDate.Format("02/01/2006"))

		// Campe√£o por PRs
		if week.Winner != "" {
			fmt.Printf("ü•á Campe√£o PRs: %s\n", week.Winner)
			// Top 3 da semana por PRs
			weekTop := pc.getTopUsersForWeek(week.UserPRs, 3)
			for i, user := range weekTop {
				medal := []string{"ü•á", "ü•à", "ü•â"}[i]
				fmt.Printf("   %s %s: %d PRs\n", medal, user.Username, user.PRsCount)
			}
		}

		// Campe√£o por coment√°rios
		if week.CommentWinner != "" {
			fmt.Printf("üí¨ Campe√£o Coment√°rios: %s\n", week.CommentWinner)
			// Top 3 da semana por coment√°rios
			weekTopComments := pc.getTopUsersForWeek(week.UserComments, 3)
			for i, user := range weekTopComments {
				medal := []string{"ü•á", "ü•à", "ü•â"}[i]
				fmt.Printf("   %s %s: %d coment√°rios\n", medal, user.Username, user.PRsCount) // PRsCount aqui representa o n√∫mero de coment√°rios
			}
		}

		// Campe√£o por qualidade de coment√°rios (pontua√ß√£o ponderada)
		if week.WeightedCommentWinner != "" {
			fmt.Printf("‚≠ê Campe√£o Qualidade: %s\n", week.WeightedCommentWinner)
			// Top 3 da semana por pontua√ß√£o ponderada
			weekTopWeighted := pc.getTopUsersForWeekWeighted(week.UserWeightedComments, 3)
			for i, user := range weekTopWeighted {
				medal := []string{"ü•á", "ü•à", "ü•â"}[i]
				fmt.Printf("   %s %s: %.1f pontos\n", medal, user.Username, user.WeightedCommentScore)
			}
		}

		fmt.Println()
	}

	// Ranking geral por pontua√ß√£o
	fmt.Println("üèÖ RANKING GERAL POR PONTUA√á√ÉO:")
	fmt.Println(strings.Repeat("=", 60))

	topUsers := pc.getTopUsersByScore(3)
	for i, user := range topUsers {
		position := i + 1
		medal := ""
		switch position {
		case 1:
			medal = "ü•á"
		case 2:
			medal = "ü•à"
		case 3:
			medal = "ü•â"
		}

		fmt.Printf("%s %d¬∞ lugar: %s\n", medal, position, user.Username)
		fmt.Printf("   üìä Pontua√ß√£o: %d pontos\n", user.TotalScore)
		fmt.Printf("   üèÜ Vit√≥rias semanais: %d\n", user.WeeklyWins)
		fmt.Printf("   üìã Total de PRs: %d\n\n", user.PRsCount)
	}

	// Ranking por pontua√ß√£o semanal de qualidade de coment√°rios
	fmt.Println("üèÖ RANKING SEMANAL POR QUALIDADE DOS COMENT√ÅRIOS:")
	fmt.Println(strings.Repeat("=", 60))

	topWeightedCommentWeeklyUsers := pc.getTopUsersByWeightedCommentWeeklyScore(3)
	if len(topWeightedCommentWeeklyUsers) == 0 {
		fmt.Println("   Nenhuma vit√≥ria semanal por qualidade de coment√°rios foi registrada no per√≠odo analisado.")
	} else {
		for i, user := range topWeightedCommentWeeklyUsers {
			position := i + 1
			medal := ""
			switch position {
			case 1:
				medal = "ü•á"
			case 2:
				medal = "ü•à"
			case 3:
				medal = "ü•â"
			}

			fmt.Printf("%s %d¬∞ lugar: %s\n", medal, position, user.Username)
			fmt.Printf("   üèÖ Pontua√ß√£o semanal: %d pontos\n", user.WeightedCommentWeeklyScore)
			fmt.Printf("   üèÜ Vit√≥rias semanais (qualidade): %d\n", user.WeightedCommentWeeklyWins)
			fmt.Printf("   ‚≠ê Pontua√ß√£o total com rea√ß√µes: %.1f pontos\n\n", user.WeightedCommentScore)
		}
	}

	// Top 3 por n√∫mero total de PRs
	fmt.Println("üìà TOP 3 POR TOTAL DE PRS:")
	fmt.Println(strings.Repeat("=", 60))

	topByPRs2 := pc.getTopUsersByPRs(3)
	for i, user := range topByPRs2 {
		position := i + 1
		medal := []string{"ü•á", "ü•à", "ü•â"}[i]
		fmt.Printf("%s %d¬∞ lugar: %s - %d PRs\n", medal, position, user.Username, user.PRsCount)
	}
	fmt.Println()

	// Top 3 por n√∫mero total de coment√°rios
	fmt.Println("üí¨ TOP 3 POR TOTAL DE COMENT√ÅRIOS:")
	fmt.Println(strings.Repeat("=", 60))

	topByComments := pc.getTopUsersByComments(3)
	if len(topByComments) == 0 {
		fmt.Println("   Nenhum coment√°rio encontrado no per√≠odo analisado.")
	} else {
		for i, user := range topByComments {
			position := i + 1
			medal := []string{"ü•á", "ü•à", "ü•â"}[i]
			fmt.Printf("%s %d¬∞ lugar: %s - %d coment√°rios\n", medal, position, user.Username, user.CommentsCount)
		}
	}
	fmt.Println()

	// Estat√≠sticas do cache
	fmt.Println("üìà ESTAT√çSTICAS DO CACHE:")
	fmt.Println(strings.Repeat("=", 60))
	fmt.Println("üíæ Sistema de cache em banco SQLite ativo")
	fmt.Println("üìã Cache de coment√°rios e rea√ß√µes: 7 dias")
	fmt.Println("üóÇÔ∏è  Local do banco: ./data/comments.db")
	fmt.Println("üí° Use --clear-database para limpar todo o cache")
}

// getTopUsersForWeek retorna os top usu√°rios de uma semana espec√≠fica
func (pc *PRChampion) getTopUsersForWeek(userPRs map[string]int, limit int) []UserStats {
	var users []UserStats
	for username, prCount := range userPRs {
		users = append(users, UserStats{
			Username: username,
			PRsCount: prCount,
		})
	}

	sort.Slice(users, func(i, j int) bool {
		return users[i].PRsCount > users[j].PRsCount
	})

	if len(users) > limit {
		users = users[:limit]
	}

	return users
}

// getTopUsersForWeekWeighted retorna os top usu√°rios por pontua√ß√£o ponderada de uma semana espec√≠fica
func (pc *PRChampion) getTopUsersForWeekWeighted(userWeightedComments map[string]float64, limit int) []UserStats {
	var users []UserStats
	for username, weightedScore := range userWeightedComments {
		users = append(users, UserStats{
			Username:             username,
			WeightedCommentScore: weightedScore,
		})
	}

	sort.Slice(users, func(i, j int) bool {
		return users[i].WeightedCommentScore > users[j].WeightedCommentScore
	})

	if len(users) > limit {
		users = users[:limit]
	}

	return users
}

// getTopUsersByScore retorna os top usu√°rios por pontua√ß√£o
func (pc *PRChampion) getTopUsersByScore(limit int) []*UserStats {
	var users []*UserStats
	for _, stats := range pc.userStats {
		users = append(users, stats)
	}

	sort.Slice(users, func(i, j int) bool {
		if users[i].TotalScore == users[j].TotalScore {
			return users[i].PRsCount > users[j].PRsCount
		}
		return users[i].TotalScore > users[j].TotalScore
	})

	if len(users) > limit {
		users = users[:limit]
	}

	return users
}

// getTopUsersByPRs retorna os top usu√°rios por n√∫mero de PRs
func (pc *PRChampion) getTopUsersByPRs(limit int) []*UserStats {
	var users []*UserStats
	for _, stats := range pc.userStats {
		users = append(users, stats)
	}

	sort.Slice(users, func(i, j int) bool {
		return users[i].PRsCount > users[j].PRsCount
	})

	if len(users) > limit {
		users = users[:limit]
	}

	return users
}

// getTopUsersByComments retorna os top usu√°rios por n√∫mero de coment√°rios
func (pc *PRChampion) getTopUsersByComments(limit int) []*UserStats {
	var users []*UserStats
	for _, stats := range pc.userStats {
		if stats.CommentsCount > 0 { // Apenas usu√°rios que fizeram coment√°rios
			users = append(users, stats)
		}
	}

	sort.Slice(users, func(i, j int) bool {
		return users[i].CommentsCount > users[j].CommentsCount
	})

	if len(users) > limit {
		users = users[:limit]
	}

	return users
}

// getTopUsersByCommentScore retorna os top usu√°rios por pontua√ß√£o de coment√°rios
func (pc *PRChampion) getTopUsersByCommentScore(limit int) []*UserStats {
	var users []*UserStats
	for _, stats := range pc.userStats {
		if stats.CommentScore > 0 { // Apenas usu√°rios que ganharam pontos por coment√°rios
			users = append(users, stats)
		}
	}

	sort.Slice(users, func(i, j int) bool {
		if users[i].CommentScore == users[j].CommentScore {
			return users[i].CommentsCount > users[j].CommentsCount
		}
		return users[i].CommentScore > users[j].CommentScore
	})

	if len(users) > limit {
		users = users[:limit]
	}

	return users
}

// getTopUsersByWeightedCommentScore retorna os top usu√°rios por pontua√ß√£o ponderada de coment√°rios
func (pc *PRChampion) getTopUsersByWeightedCommentScore(limit int) []*UserStats {
	var users []*UserStats
	for _, stats := range pc.userStats {
		if stats.WeightedCommentScore > 0 { // Apenas usu√°rios com pontua√ß√£o positiva
			users = append(users, stats)
		}
	}

	sort.Slice(users, func(i, j int) bool {
		if users[i].WeightedCommentScore == users[j].WeightedCommentScore {
			return users[i].CommentsCount > users[j].CommentsCount
		}
		return users[i].WeightedCommentScore > users[j].WeightedCommentScore
	})

	if len(users) > limit {
		users = users[:limit]
	}

	return users
}

// getTopUsersByWeightedCommentWeeklyScore retorna os top usu√°rios por pontua√ß√£o semanal de qualidade de coment√°rios
func (pc *PRChampion) getTopUsersByWeightedCommentWeeklyScore(limit int) []*UserStats {
	var users []*UserStats
	for _, stats := range pc.userStats {
		if stats.WeightedCommentWeeklyScore > 0 { // Apenas usu√°rios que ganharam pontos semanais por qualidade
			users = append(users, stats)
		}
	}

	sort.Slice(users, func(i, j int) bool {
		if users[i].WeightedCommentWeeklyScore == users[j].WeightedCommentWeeklyScore {
			return users[i].WeightedCommentWeeklyWins > users[j].WeightedCommentWeeklyWins
		}
		return users[i].WeightedCommentWeeklyScore > users[j].WeightedCommentWeeklyScore
	})

	if len(users) > limit {
		users = users[:limit]
	}

	return users
}

// isExcludedUser verifica se um usu√°rio deve ser exclu√≠do da contagem de coment√°rios
func isExcludedUser(username string) bool {
	excludedUsers := []string{
		"grupogcb",
		"sonarqubecloud",
		"copilot",
		"github-actions",
		"dependabot",
		"codecov",
		"sonarcloud",
		"renovate",
		"greenkeeper",
		"snyk-bot",
	}

	// Converte para lowercase para compara√ß√£o case-insensitive
	usernameLower := strings.ToLower(username)

	for _, excluded := range excludedUsers {
		if usernameLower == excluded || strings.Contains(usernameLower, excluded) {
			return true
		}
	}

	// Verifica se termina com [bot] (padr√£o do GitHub para bots)
	return strings.HasSuffix(usernameLower, "[bot]")
}

// calculateCommentScore calcula a pontua√ß√£o de um coment√°rio baseada em suas rea√ß√µes
func (pc *PRChampion) calculateCommentScore(ctx context.Context, repoOwner, repoName string, commentID int64) float64 {
	// Busca as rea√ß√µes do coment√°rio
	reactions, err := pc.client.ListIssueCommentReactions(ctx, repoOwner, repoName, commentID)
	if err != nil {
		// Se n√£o conseguir buscar rea√ß√µes, conta como 1 ponto normal
		return 1.0
	}

	return pc.calculateScoreFromReactions(reactions)
}

// calculateScoreFromReactions calcula a pontua√ß√£o baseada em uma lista de rea√ß√µes
func (pc *PRChampion) calculateScoreFromReactions(reactions []*github.Reaction) float64 {
	score := 1.0 // Pontua√ß√£o base do coment√°rio

	for _, reaction := range reactions {
		switch reaction.GetContent() {
		case "+1": // üëç
			score += 1.0 // +1 adicional (total = 2)
		case "-1": // üëé
			score -= 2.0 // -2 para neutralizar o ponto base e ainda penalizar (-1)
		case "heart", "hooray", "rocket": // ‚ù§Ô∏è üéâ üöÄ
			score += 0.5 // Rea√ß√µes positivas menores
		case "confused", "eyes": // üòï üëÄ
			score -= 0.5 // Rea√ß√µes neutras/negativas menores
		}
	}

	// Garante que a pontua√ß√£o m√≠nima seja -1 (para coment√°rios muito mal recebidos)
	if score < -1.0 {
		score = -1.0
	}

	return score
}

// calculateReviewCommentScore calcula a pontua√ß√£o de um review comment baseada em suas rea√ß√µes
func (pc *PRChampion) calculateReviewCommentScore(ctx context.Context, repoOwner, repoName string, commentID int64) float64 {
	// Busca as rea√ß√µes do review comment
	reactions, err := pc.client.ListPullRequestCommentReactions(ctx, repoOwner, repoName, commentID)
	if err != nil {
		// Se n√£o conseguir buscar rea√ß√µes, conta como 1 ponto normal
		return 1.0
	}

	return pc.calculateScoreFromReactions(reactions)
}

// getWeekStart retorna o in√≠cio da semana (segunda-feira)
func getWeekStart(t time.Time) time.Time {
	weekday := t.Weekday()
	if weekday == 0 {
		weekday = 7 // Domingo = 7
	}
	daysBack := int(weekday) - 1
	return t.Add(-time.Duration(daysBack) * 24 * time.Hour).Truncate(24 * time.Hour)
}

// parseDate converte string de data no formato DD/MM/YYYY para time.Time
func parseDate(dateStr string) (time.Time, error) {
	layouts := []string{
		"02/01/2006",
		"2006-01-02",
		"02-01-2006",
	}

	for _, layout := range layouts {
		if t, err := time.Parse(layout, dateStr); err == nil {
			return t, nil
		}
	}

	return time.Time{}, fmt.Errorf("formato de data inv√°lido: %s (use DD/MM/YYYY ou YYYY-MM-DD)", dateStr)
}

// parseRepositories converte strings de reposit√≥rios para slice de Repository
func parseRepositories(repoStrings []string) ([]Repository, error) {
	var repositories []Repository

	for _, repoStr := range repoStrings {
		parts := strings.Split(repoStr, "/")
		if len(parts) != 2 {
			return nil, fmt.Errorf("formato de reposit√≥rio inv√°lido: %s (use owner/repo)", repoStr)
		}

		repositories = append(repositories, Repository{
			Owner: strings.TrimSpace(parts[0]),
			Name:  strings.TrimSpace(parts[1]),
		})
	}

	return repositories, nil
}

var rootCmd = &cobra.Command{
	Use:   "pr-champion",
	Short: "PR Champion - Contabiliza PRs mergeados e gera ranking",
	Long: `PR Champion √© uma ferramenta CLI que analisa PRs mergeados em reposit√≥rios GitHub
e gera relat√≥rios com rankings baseados em pontua√ß√£o semanal.

Suporta an√°lise de reposit√≥rio √∫nico ou m√∫ltiplos reposit√≥rios simultaneamente.
Cada semana, o usu√°rio que mais teve PRs mergeados ganha 1 ponto.
O ranking final mostra os top 3 usu√°rios por pontua√ß√£o total agregada.

Reposit√≥rios podem ser especificados via:
  ‚Ä¢ Flag --repos: --repos microsoft/vscode,facebook/react
  ‚Ä¢ Vari√°vel de ambiente: GITHUB_REPOS=microsoft/vscode,facebook/react
  ‚Ä¢ Flags individuais: --owner microsoft --repo vscode`,
	Run: func(cmd *cobra.Command, args []string) {
		// Carrega vari√°veis do arquivo .env se existir
		if err := godotenv.Load(); err != nil {
			// N√£o √© um erro fatal se o arquivo .env n√£o existir
			if !os.IsNotExist(err) {
				fmt.Printf("‚ö†Ô∏è  Aviso: Erro ao carregar .env: %v\n", err)
			}
		} else {
			fmt.Println("‚úÖ Arquivo .env carregado com sucesso")
		}

		token, _ := cmd.Flags().GetString("token")
		owner, _ := cmd.Flags().GetString("owner")
		repo, _ := cmd.Flags().GetString("repo")
		reposList, _ := cmd.Flags().GetStringSlice("repos")
		startDateStr, _ := cmd.Flags().GetString("start")
		endDateStr, _ := cmd.Flags().GetString("end")
		daysBack, _ := cmd.Flags().GetInt("days")
		clearDatabase, _ := cmd.Flags().GetBool("clear-database")

		// Valida√ß√£o do token
		if token == "" {
			token = os.Getenv("GITHUB_TOKEN")
			if token == "" {
				log.Fatal("‚ùå Token do GitHub √© obrigat√≥rio. Use --token ou defina GITHUB_TOKEN")
			}
		}

		// Construir lista de reposit√≥rios
		var repositories []Repository
		var err error

		if len(reposList) > 0 {
			// Usar lista de reposit√≥rios da flag --repos
			repositories, err = parseRepositories(reposList)
			if err != nil {
				log.Fatalf("‚ùå Erro ao parsear reposit√≥rios da flag: %v", err)
			}
		} else if owner != "" && repo != "" {
			// Usar reposit√≥rio √∫nico (compatibilidade)
			repositories = []Repository{{Owner: owner, Name: repo}}
		} else {
			// Tentar ler da vari√°vel de ambiente GITHUB_REPOS
			envRepos := os.Getenv("GITHUB_REPOS")
			if envRepos != "" {
				repoStrings := strings.Split(envRepos, ",")
				// Remove espa√ßos em branco
				for i, repo := range repoStrings {
					repoStrings[i] = strings.TrimSpace(repo)
				}
				repositories, err = parseRepositories(repoStrings)
				if err != nil {
					log.Fatalf("‚ùå Erro ao parsear reposit√≥rios da vari√°vel GITHUB_REPOS: %v", err)
				}
				fmt.Printf("üìã Usando reposit√≥rios da vari√°vel GITHUB_REPOS: %s\n", envRepos)
			} else {
				log.Fatal("‚ùå Especifique reposit√≥rios usando:\n" +
					"   ‚Ä¢ --repos owner1/repo1,owner2/repo2\n" +
					"   ‚Ä¢ --owner e --repo (reposit√≥rio √∫nico)\n" +
					"   ‚Ä¢ Vari√°vel GITHUB_REPOS=owner1/repo1,owner2/repo2")
			}
		}

		var startDate, endDate time.Time

		// Se foi especificado --days, calcula as datas automaticamente
		if daysBack > 0 {
			endDate = time.Now()
			startDate = endDate.Add(-time.Duration(daysBack) * 24 * time.Hour)
		} else {
			// Parse das datas
			if startDateStr == "" {
				startDate = time.Now().Add(-30 * 24 * time.Hour) // 30 dias atr√°s por padr√£o
			} else {
				startDate, err = parseDate(startDateStr)
				if err != nil {
					log.Fatalf("‚ùå Erro na data de in√≠cio: %v", err)
				}
			}

			if endDateStr == "" {
				endDate = time.Now()
			} else {
				endDate, err = parseDate(endDateStr)
				if err != nil {
					log.Fatalf("‚ùå Erro na data de fim: %v", err)
				}
			}
		}

		// Valida√ß√£o das datas
		if endDate.Before(startDate) {
			log.Fatal("‚ùå Data de fim deve ser posterior √† data de in√≠cio")
		}

		fmt.Println("üöÄ Iniciando PR Champion...")

		prChampion, err := NewPRChampion(token, repositories, startDate, endDate)
		if err != nil {
			log.Fatalf("‚ùå Erro ao inicializar PR Champion: %v", err)
		}

		// Garante que a conex√£o seja fechada no final
		defer func() {
			if prChampion.cachedClient != nil {
				prChampion.cachedClient.Close()
			}
		}()

		// Se a flag clear-database foi especificada, limpa o cache primeiro
		if clearDatabase {
			fmt.Println("üóëÔ∏è  Limpando cache do banco de dados...")
			if err := prChampion.ClearCache(); err != nil {
				log.Fatalf("‚ùå Erro ao limpar cache: %v", err)
			}
			fmt.Println("‚úÖ Cache limpo com sucesso!")
		}

		if err := prChampion.FetchMergedPRs(); err != nil {
			log.Fatalf("‚ùå Erro ao buscar PRs: %v", err)
		}

		prChampion.GenerateReport()

		fmt.Println("\n‚úÖ Relat√≥rio gerado com sucesso!")
	},
}

func init() {
	rootCmd.Flags().StringP("token", "t", "", "Token de acesso do GitHub (ou use GITHUB_TOKEN env var)")
	rootCmd.Flags().StringP("owner", "o", "", "Owner do reposit√≥rio (compatibilidade com repo √∫nico)")
	rootCmd.Flags().StringP("repo", "r", "", "Nome do reposit√≥rio (compatibilidade com repo √∫nico)")
	rootCmd.Flags().StringSliceP("repos", "R", []string{}, "Lista de reposit√≥rios no formato owner/repo (ou use GITHUB_REPOS env var)")
	rootCmd.Flags().StringP("start", "s", "", "Data de in√≠cio (DD/MM/YYYY ou YYYY-MM-DD)")
	rootCmd.Flags().StringP("end", "e", "", "Data de fim (DD/MM/YYYY ou YYYY-MM-DD)")
	rootCmd.Flags().IntP("days", "d", 0, "N√∫mero de dias atr√°s para analisar (alternativa √†s datas espec√≠ficas)")
	rootCmd.Flags().BoolP("clear-database", "c", false, "Limpa todo o cache do banco de dados antes de executar")
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
