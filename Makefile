# Makefile para PR Champion

# Vari√°veis
BINARY_NAME=pr-champion
MAIN_PATH=main.go

# Comandos padr√£o
.PHONY: build clean install test help run-example

# Build da aplica√ß√£o
build:
	@echo "üî® Compilando PR Champion..."
	go build -o $(BINARY_NAME) $(MAIN_PATH)
	@echo "‚úÖ Build conclu√≠do! Execute com: ./$(BINARY_NAME)"

# Instala depend√™ncias
deps:
	@echo "üì¶ Instalando depend√™ncias..."
	go mod tidy
	go mod download

# Limpa arquivos de build
clean:
	@echo "üßπ Limpando arquivos de build..."
	rm -f $(BINARY_NAME)
	go clean

# Instala globalmente
install: build
	@echo "üöÄ Instalando globalmente..."
	go install

# Executa testes
test:
	@echo "üß™ Executando testes..."
	go test -v ./...

# Executa usando configura√ß√£o do arquivo .env
run-env:
	@echo "üéØ Executando com configura√ß√£o do arquivo .env"
	@echo "üìã Usando reposit√≥rios definidos em .env"
	./$(BINARY_NAME) --days 7

# Executa an√°lise mensal com .env
run-env-month:
	@echo "üéØ An√°lise mensal usando arquivo .env"
	./$(BINARY_NAME) --days 30

# Executa an√°lise semanal com .env
run-env-week:
	@echo "üéØ An√°lise semanal usando arquivo .env"
	./$(BINARY_NAME) --days 7

# Setup inicial do arquivo .env
setup-env:
	@echo "üîß Configurando arquivo .env..."
	@if [ ! -f .env ]; then \
		cp .env.example .env; \
		echo "‚úÖ Arquivo .env criado a partir do exemplo"; \
		echo "üìù Edite o arquivo .env e configure seu GITHUB_TOKEN"; \
	else \
		echo "‚ö†Ô∏è  Arquivo .env j√° existe"; \
	fi

# Executa exemplo com reposit√≥rio √∫nico
run-example:
	@echo "üéØ Exemplo: Analisando reposit√≥rio microsoft/vscode (√∫ltimos 30 dias)"
	@echo "‚ö†Ô∏è  Certifique-se de definir GITHUB_TOKEN antes de executar"
	./$(BINARY_NAME) --owner microsoft --repo vscode --days 30

# Executa exemplo com m√∫ltiplos reposit√≥rios
run-example-multi:
	@echo "üéØ Exemplo: Analisando m√∫ltiplos reposit√≥rios - Ecossistema React (√∫ltimos 14 dias)"
	@echo "‚ö†Ô∏è  Certifique-se de definir GITHUB_TOKEN antes de executar"
	./$(BINARY_NAME) --repos facebook/react,vercel/next.js,remix-run/remix --days 14

# Executa exemplo com per√≠odo espec√≠fico
run-example-period:
	@echo "üéØ Exemplo: Analisando m√∫ltiplos reposit√≥rios - Linguagens modernas (per√≠odo espec√≠fico)"
	@echo "‚ö†Ô∏è  Certifique-se de definir GITHUB_TOKEN antes de executar"
	./$(BINARY_NAME) --repos golang/go,rust-lang/rust,microsoft/TypeScript --start "01/09/2024" --end "30/09/2024"

# Verifica se o token est√° configurado
check-token:
	@if [ -z "$$GITHUB_TOKEN" ]; then \
		echo "‚ùå GITHUB_TOKEN n√£o est√° definido!"; \
		echo "üí° Execute: export GITHUB_TOKEN='seu_token_aqui'"; \
		exit 1; \
	else \
		echo "‚úÖ GITHUB_TOKEN est√° configurado"; \
	fi

# Build e executa exemplo completo com .env
demo: build
	@echo "üé¨ Executando demonstra√ß√£o usando arquivo .env..."
	./$(BINARY_NAME) --days 7

# Mostra ajuda
help:
	@echo "üìã Comandos dispon√≠veis:"
	@echo ""
	@echo "  make build           - Compila a aplica√ß√£o"
	@echo "  make deps            - Instala depend√™ncias"
	@echo "  make clean           - Remove arquivos de build"
	@echo "  make install         - Instala globalmente"
	@echo "  make test            - Executa testes"
	@echo "  make check-token     - Verifica se GITHUB_TOKEN est√° configurado"
	@echo "  make setup-env       - Cria arquivo .env a partir do exemplo"
	@echo "  make run-env         - Executa usando configura√ß√£o do .env (7 dias)"
	@echo "  make run-env-week    - Executa an√°lise semanal usando .env"
	@echo "  make run-env-month   - Executa an√°lise mensal usando .env"
	@echo "  make demo            - Build + executa demonstra√ß√£o usando .env (7 dias)"
	@echo "  make dist            - Cria pacote distribu√≠vel com .env"
	@echo "  make release         - Cria builds otimizados para m√∫ltiplas plataformas"
	@echo ""
	@echo "üîß Exemplos com flags:"
	@echo "  make run-example     - Executa exemplo (microsoft/vscode, 30 dias)"
	@echo "  make run-example-multi - Executa exemplo com m√∫ltiplos repos (React ecosystem, 14 dias)"
	@echo "  make run-example-period - Executa exemplo com per√≠odo espec√≠fico (m√∫ltiplos repos)"
	@echo "  make help            - Mostra esta ajuda"
	@echo ""
	@echo "üìö Para mais informa√ß√µes, consulte o README.md"

# Comando padr√£o
all: deps build

# Verifica formata√ß√£o e qualidade do c√≥digo
lint:
	@echo "üîç Verificando qualidade do c√≥digo..."
	go fmt ./...
	go vet ./...

# Release build (otimizado) que inclui .env
release:
	@echo "üöÄ Criando builds de release..."
	@if [ ! -f .env ]; then \
		echo "‚ùå Arquivo .env n√£o encontrado. Execute 'make setup-env' primeiro"; \
		exit 1; \
	fi
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o $(BINARY_NAME)-linux-amd64 $(MAIN_PATH)
	CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o $(BINARY_NAME)-darwin-amd64 $(MAIN_PATH)
	CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o $(BINARY_NAME)-darwin-arm64 $(MAIN_PATH)
	CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o $(BINARY_NAME)-windows-amd64.exe $(MAIN_PATH)
	@echo "‚úÖ Builds de release criados para m√∫ltiplas plataformas!"
	@echo "üìã Certifique-se de que o arquivo .env esteja no mesmo diret√≥rio do execut√°vel"

# Build distribu√≠vel com .env
dist: build
	@echo "üì¶ Criando pacote distribu√≠vel..."
	@mkdir -p dist
	@cp $(BINARY_NAME) dist/
	@cp .env.example dist/.env
	@cp README.md dist/
	@cp QUICKSTART.md dist/
	@echo "‚úÖ Pacote criado em ./dist/"
	@echo "üí° Para usar: cd dist && ./$(BINARY_NAME) --days 7"
